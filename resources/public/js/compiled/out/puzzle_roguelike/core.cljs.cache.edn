;; Analyzed by ClojureScript 1.7.170
{:use-macros {go-loop cljs.core.async.macros, handler-fn puzzle-roguelike.macros}, :excludes #{}, :name puzzle-roguelike.core, :imports nil, :requires {reagent reagent.core, map puzzle-roguelike.map, animations puzzle-roguelike.animations, async cljs.core.async, reagent.core reagent.core, puzzle-roguelike.components puzzle-roguelike.components, cljs.core.async cljs.core.async, state puzzle-roguelike.state, puzzle-roguelike.state puzzle-roguelike.state, c puzzle-roguelike.components, puzzle-roguelike.map puzzle-roguelike.map, puzzle-roguelike.animations puzzle-roguelike.animations}, :uses {<! cljs.core.async, chan cljs.core.async, game-state puzzle-roguelike.state, >! cljs.core.async, tile-size puzzle-roguelike.components, put! cljs.core.async}, :defs {run-event-loop {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 110, :column 7, :end-line 110, :end-column 21, :arglists (quote ([in-chan])), :doc "Main game event dispatcher. Listen to events on in-chan and dispatch accordingly"}, :name puzzle-roguelike.core/run-event-loop, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 21, :method-params ([in-chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([in-chan])), :doc "Main game event dispatcher. Listen to events on in-chan and dispatch accordingly"}, move-player {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 31, :column 7, :end-line 31, :end-column 18, :arglists (quote ([state x y])), :doc "Returns a new state where the player has moved to the specified position"}, :name puzzle-roguelike.core/move-player, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 18, :method-params ([state x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state x y])), :doc "Returns a new state where the player has moved to the specified position"}, stairs-down? {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 44, :column 7, :end-line 44, :end-column 19, :arglists (quote ([map x y]))}, :name puzzle-roguelike.core/stairs-down?, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 19, :method-params ([map x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists (quote ([map x y]))}, game-container {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 124, :column 7, :end-line 124, :end-column 21, :arglists (quote ([])), :doc "Main container for game elements. Starts animation and event loops on first render."}, :name puzzle-roguelike.core/game-container, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Main container for game elements. Starts animation and event loops on first render."}, check-for-next-state {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 101, :column 7, :end-line 101, :end-column 27, :arglists (quote ([state])), :doc "Checks if the current ui/state should be updated (i.e. game over, new game, etc)"}, :name puzzle-roguelike.core/check-for-next-state, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 27, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Checks if the current ui/state should be updated (i.e. game over, new game, etc)"}, display-message {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 19, :column 7, :end-line 19, :end-column 22, :arglists (quote ([state message])), :doc "Adds message to the message list in state"}, :name puzzle-roguelike.core/display-message, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 22, :method-params ([state message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state message])), :doc "Adds message to the message list in state"}, initialize! {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 15, :column 7, :end-line 15, :end-column 18, :arglists (quote ([]))}, :name puzzle-roguelike.core/initialize!, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 148, :column 7, :end-line 148, :end-column 19, :arglists (quote ([]))}, :name puzzle-roguelike.core/on-js-reload, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, subtract-food {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 25, :column 7, :end-line 25, :end-column 20, :arglists (quote ([state amount])), :doc "Subtracts the amount of food from the current player state"}, :name puzzle-roguelike.core/subtract-food, :variadic false, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :end-column 20, :method-params ([state amount]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state amount])), :doc "Subtracts the amount of food from the current player state"}, events-chan {:name puzzle-roguelike.core/events-chan, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 13, :column 1, :end-line 13, :end-column 17, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 13, :column 6, :end-line 13, :end-column 17}}, dispatch-event {:name puzzle-roguelike.core/dispatch-event, :file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 51, :column 1, :end-line 51, :end-column 25, :doc "Returns a new state where the specified action has taken place", :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/core.cljs", :line 51, :column 11, :end-line 51, :end-column 25, :doc "Returns a new state where the specified action has taken place"}}}, :require-macros {am cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, rm puzzle-roguelike.macros, puzzle-roguelike.macros puzzle-roguelike.macros}, :cljs.analyzer/constants {:seen #{:key :else :button :get-item :default :move :div.title :recur :type :on-click :div.game-wrapper :food :messages :div.container :position :player :tiles :hierarchy :attack :stairs-down :floor}, :order [:messages :player :food :position :key :stairs-down :hierarchy :type :default :move :tiles :attack :get-item :floor :recur :else :div.container :div.title :div.game-wrapper :button :on-click]}, :doc nil}