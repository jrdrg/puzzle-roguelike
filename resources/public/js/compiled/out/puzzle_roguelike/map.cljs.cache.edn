;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name puzzle-roguelike.map, :imports nil, :requires {img puzzle-roguelike.images, puzzle-roguelike.images puzzle-roguelike.images}, :uses {sprite-coords puzzle-roguelike.images}, :defs {random-items-list {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 152, :column 7, :end-line 152, :end-column 24, :arglists (quote ([state]))}, :name puzzle-roguelike.map/random-items-list, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 24, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, enemy-map {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([]))}, :name puzzle-roguelike.map/enemy-map, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-tile-at {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 77, :column 7, :end-line 77, :end-column 18, :arglists (quote ([tiles x y])), :doc "Returns the tile at x,y or the first (out-of-bounds) tile if invalid."}, :name puzzle-roguelike.map/get-tile-at, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 18, :method-params ([tiles x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tiles x y])), :doc "Returns the tile at x,y or the first (out-of-bounds) tile if invalid."}, distance {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 83, :column 7, :end-line 83, :end-column 15, :arglists (quote ([[x1 y1] [x2 y2]])), :doc "Manhattan distance between 2 points"}, :name puzzle-roguelike.map/distance, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 15, :method-params ([p__57615 p__57616]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[x1 y1] [x2 y2]])), :doc "Manhattan distance between 2 points"}, enemy-data {:name puzzle-roguelike.map/enemy-data, :file "src/puzzle_roguelike/map.cljs", :line 33, :column 1, :end-line 33, :end-column 16, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 33, :column 6, :end-line 33, :end-column 16}}, valid-move? {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 88, :column 7, :end-line 88, :end-column 18, :arglists (quote ([x y [pos-x pos-y]])), :doc "True if the given coordinates are a valid move from the current player position"}, :name puzzle-roguelike.map/valid-move?, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 18, :method-params ([x y p__57621]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y [pos-x pos-y]])), :doc "True if the given coordinates are a valid move from the current player position"}, add-enemies-to-map {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 157, :column 7, :end-line 157, :end-column 25, :arglists (quote ([state])), :doc "Adds random enemies to the map. Requires the map to have been previously generated, and needs the state since enemies are stored separately from tiles."}, :name puzzle-roguelike.map/add-enemies-to-map, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 25, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Adds random enemies to the map. Requires the map to have been previously generated, and needs the state since enemies are stored separately from tiles."}, by-key {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 42, :column 8, :end-line 42, :end-column 14, :private true, :arglists (quote ([items key]))}, :private true, :name puzzle-roguelike.map/by-key, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 14, :method-params ([items key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items key]))}, entity-keys {:name puzzle-roguelike.map/entity-keys, :file "src/puzzle_roguelike/map.cljs", :line 18, :column 1, :end-line 18, :end-column 17, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 18, :column 6, :end-line 18, :end-column 17}}, place-stairs-down {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 109, :column 7, :end-line 109, :end-column 24, :arglists (quote ([map [start-x start-y]])), :doc "Places the stairs on the map at a random point"}, :name puzzle-roguelike.map/place-stairs-down, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 24, :method-params ([map p__57627]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map [start-x start-y]])), :doc "Places the stairs on the map at a random point"}, tile-keys {:name puzzle-roguelike.map/tile-keys, :file "src/puzzle_roguelike/map.cljs", :line 7, :column 1, :end-line 7, :end-column 15, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 7, :column 6, :end-line 7, :end-column 15}}, tile-map {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([]))}, :name puzzle-roguelike.map/tile-map, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, item-map {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 55, :column 7, :end-line 55, :end-column 15, :arglists (quote ([]))}, :name puzzle-roguelike.map/item-map, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, find-stairs-location {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 99, :column 7, :end-line 99, :end-column 27, :arglists (quote ([map start-x start-y])), :doc "Returns the location of the stairs to the next level given the starting position of the player"}, :name puzzle-roguelike.map/find-stairs-location, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 27, :method-params ([map start-x start-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 3, :fn-var true, :arglists (quote ([map start-x start-y])), :doc "Returns the location of the stairs to the next level given the starting position of the player"}, stairs-down? {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 93, :column 7, :end-line 93, :end-column 19, :arglists (quote ([tile-map x y])), :doc "True if the tile at [x y] is the stairs down"}, :name puzzle-roguelike.map/stairs-down?, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 19, :method-params ([tile-map x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tile-map x y])), :doc "True if the tile at [x y] is the stairs down"}, random-list {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 139, :column 7, :end-line 139, :end-column 18, :arglists (quote ([state min-pct max-pct random-element]))}, :name puzzle-roguelike.map/random-list, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 18, :method-params ([state min-pct max-pct random-element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 4, :fn-var true, :arglists (quote ([state min-pct max-pct random-element]))}, get-random-tile {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 59, :column 7, :end-line 59, :end-column 22, :arglists (quote ([tiles])), :doc "Returns a random tile from tiles, taking its weight into consideration"}, :name puzzle-roguelike.map/get-random-tile, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 22, :method-params ([tiles]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tiles])), :doc "Returns a random tile from tiles, taking its weight into consideration"}, add-items-to-map {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 163, :column 7, :end-line 163, :end-column 23, :arglists (quote ([state]))}, :name puzzle-roguelike.map/add-items-to-map, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 23, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, enemy-keys {:name puzzle-roguelike.map/enemy-keys, :file "src/puzzle_roguelike/map.cljs", :line 31, :column 1, :end-line 31, :end-column 16, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 31, :column 6, :end-line 31, :end-column 16}}, entity-data {:name puzzle-roguelike.map/entity-data, :file "src/puzzle_roguelike/map.cljs", :line 20, :column 1, :end-line 20, :end-column 17, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 20, :column 6, :end-line 20, :end-column 17}}, place-start-point {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 116, :column 7, :end-line 116, :end-column 24, :arglists (quote ([map [start-x start-y]]))}, :name puzzle-roguelike.map/place-start-point, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 24, :method-params ([map p__57632]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map [start-x start-y]]))}, random-enemies-list {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 147, :column 7, :end-line 147, :end-column 26, :arglists (quote ([state]))}, :name puzzle-roguelike.map/random-enemies-list, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 26, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, tile-data {:name puzzle-roguelike.map/tile-data, :file "src/puzzle_roguelike/map.cljs", :line 9, :column 1, :end-line 9, :end-column 15, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 9, :column 6, :end-line 9, :end-column 15}}, map-size {:name puzzle-roguelike.map/map-size, :file "src/puzzle_roguelike/map.cljs", :line 4, :column 1, :end-line 4, :end-column 14, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 4, :column 6, :end-line 4, :end-column 14}}, possible-tiles {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 134, :column 7, :end-line 134, :end-column 21, :arglists (quote ([state])), :doc "Returns a list of tiles that are empty and can have something placed on them"}, :name puzzle-roguelike.map/possible-tiles, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Returns a list of tiles that are empty and can have something placed on them"}, maybe-something? {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 120, :column 7, :end-line 120, :end-column 23, :arglists (quote ([tile-map enemies player-pos]))}, :name puzzle-roguelike.map/maybe-something?, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 23, :method-params ([tile-map enemies player-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tile-map enemies player-pos]))}, keys-and-data {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 37, :column 8, :end-line 37, :end-column 21, :private true, :arglists (quote ([keys data])), :doc "Helper function to map arrays of keys and data into a map structure"}, :private true, :name puzzle-roguelike.map/keys-and-data, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 21, :method-params ([keys data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keys data])), :doc "Helper function to map arrays of keys and data into a map structure"}, get-random-map {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 66, :column 7, :end-line 66, :end-column 21, :arglists (quote ([tiles])), :doc "Returns a random map"}, :name puzzle-roguelike.map/get-random-map, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 21, :method-params ([tiles]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tiles])), :doc "Returns a random map"}, random-between {:protocol-inline nil, :meta {:file "/Users/john/programmingstuff/clojurescript/puzzle-roguelike/src/puzzle_roguelike/map.cljs", :line 128, :column 7, :end-line 128, :end-column 21, :arglists (quote ([min-pct max-pct count]))}, :name puzzle-roguelike.map/random-between, :variadic false, :file "src/puzzle_roguelike/map.cljs", :end-column 21, :method-params ([min-pct max-pct count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 3, :fn-var true, :arglists (quote ([min-pct max-pct count]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:description :start-point :dmg :moneybag :animation :color :key :bat :snake :symbol :background :open-chest :atk :pos :stairs-up :empty :bounds :sprite :level :food :closed-chest :weight :food-consumption :position :tiles :def :rocks :effect :hp :enemies :items :coin :water :stairs-down :none :poison}, :order [:key :description :symbol :background :food-consumption :weight :sprite :bounds :stairs-down :stairs-up :start-point :empty :water :rocks :color :coin :moneybag :hp :atk :def :food :closed-chest :open-chest :level :dmg :effect :bat :none :snake :poison :position :tiles :enemies :animation :pos :items]}, :doc nil}